generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String              @id @default(cuid())
  clerkId              String              @unique
  email                String              @unique
  firstName            String?
  lastName             String?
  imageUrl             String?
  isPremium            Boolean             @default(false)
  planType             PlanType            @default(FREE)
  subscriptionId       String?
  subscriptionStatus   SubscriptionStatus?
  subscriptionEndsAt   DateTime?
  monthlyMessageCount  Int                 @default(0)
  monthlyDocumentCount Int                 @default(0)
  lastResetDate        DateTime            @default(now())
  preferredLanguage    String              @default("tr")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  dataSharing          Boolean             @default(false)
  emailNotifications   Boolean             @default(true)
  marketingEmails      Boolean             @default(false)
  profileVisibility    String              @default("private")
  securityAlerts       Boolean             @default(true)
  storageUsed          BigInt              @default(0)
  timezone             String              @default("Europe/Istanbul")
  twoFactorEnabled     Boolean             @default(false)
  conversations        Conversation[]
  documents            Document[]
  subscriptions        Subscription[]

  @@map("users")
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Document {
  id            String         @id @default(cuid())
  userId        String
  fileName      String
  originalName  String
  fileSize      Int
  mimeType      String
  fileUrl       String?
  extractedText String?
  status        DocumentStatus @default(PROCESSING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planType        PlanType
  status          SubscriptionStatus
  paymentProvider String?
  externalId      String?
  amount          Float?
  currency        String             @default("TRY")
  billingCycle    String             @default("monthly")
  startDate       DateTime
  endDate         DateTime?
  canceledAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("analytics")
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum DocumentStatus {
  PROCESSING
  COMPLETED
  FAILED
}

// Sprint 3: Cache System Models
model EmbeddingCache {
  id          String   @id @default(cuid())
  textHash    String   @unique
  originalText String  @db.Text
  embedding   Json
  domain      String?
  createdAt   DateTime @default(now())
  lastUsed    DateTime @default(now())
  useCount    Int      @default(1)

  @@index([textHash])
  @@index([domain, lastUsed])
  @@map("embedding_cache")
}

model GrokCache {
  id          String   @id @default(cuid())
  promptHash  String   @unique
  promptType  String   // 'intent', 'expansion', 'ranking', 'synthesis'
  response    Json
  createdAt   DateTime @default(now())
  lastUsed    DateTime @default(now())
  useCount    Int      @default(1)
  expiresAt   DateTime // TTL for different types

  @@index([promptType, lastUsed])
  @@index([expiresAt]) // For cleanup
  @@map("grok_cache")
}

model CacheAnalytics {
  id         String   @id @default(cuid())
  layer      String   // 'vercel', 'database', 'memory'
  cacheType  String   // 'embedding', 'grok', 'mevzuat'
  hitCount   Int      @default(0)
  missCount  Int      @default(0)
  totalTime  Float    @default(0) // Total response time in ms
  avgTime    Float    @default(0) // Average response time in ms
  costSaved  Float    @default(0) // Cost saved in USD
  date       DateTime @default(now())

  @@unique([layer, cacheType, date])
  @@index([layer, cacheType, date])
  @@map("cache_analytics")
}
